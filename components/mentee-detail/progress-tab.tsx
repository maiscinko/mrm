"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Download } from "lucide-react"
import dynamic from "next/dynamic"
import type { Database } from "@/lib/supabase/database.types"

const LineChart = dynamic(() => import("recharts").then((mod) => mod.LineChart), { ssr: false })
const Line = dynamic(() => import("recharts").then((mod) => mod.Line), { ssr: false })
const BarChart = dynamic(() => import("recharts").then((mod) => mod.BarChart), { ssr: false })
const Bar = dynamic(() => import("recharts").then((mod) => mod.Bar), { ssr: false })
const XAxis = dynamic(() => import("recharts").then((mod) => mod.XAxis), { ssr: false })
const YAxis = dynamic(() => import("recharts").then((mod) => mod.YAxis), { ssr: false })
const CartesianGrid = dynamic(() => import("recharts").then((mod) => mod.CartesianGrid), { ssr: false })
const Tooltip = dynamic(() => import("recharts").then((mod) => mod.Tooltip), { ssr: false })
const ResponsiveContainer = dynamic(() => import("recharts").then((mod) => mod.ResponsiveContainer), { ssr: false })

type Mentee = Database["public"]["Tables"]["mentees"]["Row"] & {
  sessions?: Database["public"]["Tables"]["sessions"]["Row"][]
  deliverables?: Database["public"]["Tables"]["deliverables"]["Row"][]
  progress_tracking?: Database["public"]["Tables"]["progress_tracking"]["Row"][]
}

interface ProgressTabProps {
  mentee: Mentee
}

export function ProgressTab({ mentee }: ProgressTabProps) {
  // Prepare clarity score data
  const clarityData =
    mentee.progress_tracking
      ?.sort((a, b) => new Date(a.measurement_date).getTime() - new Date(b.measurement_date).getTime())
      .map((pt) => ({
        date: new Date(pt.measurement_date).toLocaleDateString("en-US", { month: "short", day: "numeric" }),
        score: pt.clarity_score,
      })) || []

  // Add baseline if exists
  if (mentee.baseline_clarity_score && clarityData.length > 0) {
    clarityData.unshift({
      date: "Baseline",
      score: mentee.baseline_clarity_score,
    })
  }

  // Prepare deliverables completion data by month
  const deliverablesByMonth =
    mentee.deliverables
      ?.filter((d) => d.status === "completed" && d.completed_at)
      .reduce((acc: Record<string, number>, d) => {
        const month = new Date(d.completed_at!).toLocaleDateString("en-US", { month: "short", year: "numeric" })
        acc[month] = (acc[month] || 0) + 1
        return acc
      }, {}) || {}

  const deliverablesData = Object.entries(deliverablesByMonth).map(([month, count]) => ({
    month,
    count,
  }))

  const exportPDF = async () => {
    try {
      const jsPDF = (await import("jspdf")).default
      const doc = new jsPDF()

      // Header
      doc.setFontSize(20)
      doc.text("Progress Report", 20, 20)
      doc.setFontSize(12)
      doc.text(`Mentee: ${mentee.full_name}`, 20, 30)
      doc.text(`Company: ${mentee.company || "N/A"}`, 20, 37)
      doc.text(`Report Date: ${new Date().toLocaleDateString()}`, 20, 44)

      // Progress Summary
      doc.setFontSize(16)
      doc.text("Progress Summary", 20, 60)
      doc.setFontSize(11)

      const totalDeliverables = mentee.deliverables?.length || 0
      const completedDeliverables = mentee.deliverables?.filter((d) => d.status === "completed").length || 0
      const progressPercentage =
        totalDeliverables > 0 ? Math.round((completedDeliverables / totalDeliverables) * 100) : 0

      doc.text(`Overall Progress: ${progressPercentage}%`, 20, 70)
      doc.text(`Deliverables Completed: ${completedDeliverables} of ${totalDeliverables}`, 20, 77)
      doc.text(`Total Sessions: ${mentee.sessions?.length || 0}`, 20, 84)

      // Clarity Evolution
      if (clarityData.length > 0) {
        doc.setFontSize(16)
        doc.text("Clarity Evolution", 20, 100)
        doc.setFontSize(11)
        const latestClarity = clarityData[clarityData.length - 1]
        doc.text(`Current Clarity Score: ${latestClarity.score}/10`, 20, 110)
        if (mentee.baseline_clarity_score) {
          doc.text(`Baseline: ${mentee.baseline_clarity_score}/10`, 20, 117)
          doc.text(`Improvement: +${latestClarity.score - mentee.baseline_clarity_score} points`, 20, 124)
        }
      }

      // Footer
      doc.setFontSize(9)
      doc.text("Generated by MRM - Mentoring Relationship Manager", 20, 280)

      doc.save(`${mentee.full_name.replace(/\s+/g, "_")}_Progress_Report.pdf`)
    } catch (error) {
      console.error("[v0] Error generating PDF:", error)
      alert("Failed to generate PDF")
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-end">
        <Button onClick={exportPDF}>
          <Download className="mr-2 h-4 w-4" />
          Export PDF Report
        </Button>
      </div>

      {/* Clarity Score Chart */}
      <Card>
        <CardHeader>
          <CardTitle>Clarity Evolution</CardTitle>
          <p className="text-sm text-muted-foreground">Tracking clarity score over time (1-10 scale)</p>
        </CardHeader>
        <CardContent>
          {clarityData.length === 0 ? (
            <p className="text-center text-muted-foreground py-8">No clarity tracking data yet</p>
          ) : (
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={clarityData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis domain={[0, 10]} />
                <Tooltip />
                <Line type="monotone" dataKey="score" stroke="hsl(var(--primary))" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          )}
        </CardContent>
      </Card>

      {/* Deliverables Completion Chart */}
      <Card>
        <CardHeader>
          <CardTitle>Deliverables Completed</CardTitle>
          <p className="text-sm text-muted-foreground">Number of deliverables completed by month</p>
        </CardHeader>
        <CardContent>
          {deliverablesData.length === 0 ? (
            <p className="text-center text-muted-foreground py-8">No completed deliverables yet</p>
          ) : (
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={deliverablesData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="hsl(var(--primary))" />
              </BarChart>
            </ResponsiveContainer>
          )}
        </CardContent>
      </Card>

      {/* AI Summary */}
      <Card>
        <CardHeader>
          <CardTitle>AI Progress Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            Over the past {mentee.sessions?.length || 0} sessions, {mentee.full_name} has shown consistent progress in
            achieving their stated goal: "{mentee.stated_goal}".
            {mentee.deliverables && mentee.deliverables.length > 0 && (
              <>
                {" "}
                They have completed {mentee.deliverables.filter((d) => d.status === "completed").length} out of{" "}
                {mentee.deliverables.length} deliverables.
              </>
            )}
          </p>
        </CardContent>
      </Card>
    </div>
  )
}
